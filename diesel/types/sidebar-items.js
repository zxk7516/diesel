initSidebarItems({"enum":[["IsNull","Tiny enum to make the return type of `ToSql` more descriptive"]],"mod":[["ops","Apps should not need to concern themselves with this module."]],"struct":[["BigInt","The big integer SQL type."],["Binary","The binary SQL type."],["Bool","The boolean SQL type. On SQLite this is emulated with an integer."],["Date","The date SQL type."],["Double","The double precision float SQL type."],["Float","The float SQL type."],["Integer","The integer SQL type."],["Interval","The interval SQL type."],["Nullable","The nullable SQL type. This wraps another SQL type to indicate that it can be null. By default all values are assumed to be `NOT NULL`."],["Numeric","The numeric SQL type."],["SmallInt","The small integer SQL type."],["Text","The text SQL type."],["Time","The time SQL type."],["Timestamp","The timestamp/datetime SQL type."],["Tinyint","The tinyint SQL type. This is only available on MySQL."]],"trait":[["Foldable","Marker trait for types which can be folded for a sum."],["FromSql","How to deserialize a single field of a given type. The input will always be the binary representation, not the text."],["FromSqlRow","How to deserialize multiple fields, with a known type. This type is implemented for tuples of various sizes."],["HasSqlType",""],["IntoNullable",""],["NotNull",""],["SingleValue",""],["SqlOrd","Marker trait for types which can be compared for ordering."],["ToSql","Serializes a single value to be sent to the database. The output will be included as a bind parameter, and is expected to be the binary format, not text."]],"type":[["Decimal",""],["VarChar",""]]});